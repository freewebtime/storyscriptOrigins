* ссылка = function (@урл, @текст) {
  return "[*@текст;](*@урл;)";
}

* фото = function (@урл, @текст, @imgRoot) {
  if (!@imgRoot) {
    @imgRoot = "https:\//raw.githubusercontent.com/freewebtime/storyscriptOrigins/master/resources/";
  }
  return "![*@текст;](*@imgRoot;*@урл;)";
}

# Storyscript. Инструкция
Актуально для версий 1.4.x. Примите во внимание, что Storyscript работает в экспериментальном режиме, и некоторые правила могут быть в дальнейшем изменены

Это - краткая инструкция пользователя языка программирования *ссылка("https:\//github.com/freewebtime/storyscript", "storyscript"); в *ссылка("https:\//code.visualstudio.com/", "Microsoft Visual Studio Code");

## Начало работы
Установите *ссылка("https:\//code.visualstudio.com/", "Microsoft Visual Studio Code");
*фото("vscode_new.png", "vscode");

Установите *ссылка("https:\//marketplace.visualstudio.com/items?itemName=jackstorytailor.storyscript-vscode", "Storyscript плагин для vscode");
*фото("install_extension.png", "пустая папка");

#### Начинаем

Самый простой способ приступить к работе - это открыть пустую папку в vscode и скопировать в нее тестовый проект

Откройте пустую папку
*фото("vscode_empty.png", "пустая папка");

Кликните правой клавишей мыши в корне проекта и выберите из выпадающего меню "Initialize example project in a working root"
*фото("init_example_project.png", "скопировать тестовый проект в корневую папку");

Эта операция скопирует в корневую папку тестовый проект. Учтите, что если в корневой папке уже есть такие файлы, то они будут перетерты. Подтверждайте копирование
*фото("confirm_init_example_project.png", "подтвердить копирование");

Тестовый проект скопирован в корневую папку. Примерно так должна выглядеть файловая структура проекта
*фото("example_project_created.png", "тестовый проект создан");

Обновите node-модули. Для этого

Откройте терминал
*фото("open_terminal.png", "npm install в терминале");

Вбейте комманду "npm install" или "npm i" и нажмите "ENTER"
*фото("npm_install.png", "npm install в терминале");

node-модули обновлены
*фото("node_modules_created.png", "npm install в терминале");

терминал можно закрыть
*фото("close_terminal.png", "закрыть терминал");


Исходные файлы истории хранятся в папке story (\*.sts)
*фото("story_source_files.png", "исходники истории");

Подготовка проекта завершена. Это его рабочее состояние

#### Теперь выполним сборку тестового проекта. 
Откройте файл с исходниками истории. Например, story/index.sts

Открывайте Command Palette (Меню View -> Command Palette или комбинация клавиш Ctrl+Shift+P) 
*фото("command_palette.png", "command palette");

*фото("command_palette_openned.png", "command palette openned");

Выбирайте комманду "Compile: Compile and show preview" (по-умолчанию Ctrl+Alt+P)
*фото("compile_and_show_preview.png", "compile and show preview");

В папке src сохраняется история на typescript. В папке out будет эта история на javascript
*фото("compiled_story.png", "compiled story");

Когда сборка истории завершена, открывается предпросмотр
*фото("preview_story.png", "compiled story");

Окно предпросмотра можно размещать как удобно
*фото("layout_2.png", "compiled story");
*фото("layout_3.png", "compiled story");

Текст, показанный в окне предпросмотра, сохраняется в файл "story output.txt" в корне проекта
*фото("story_output.png", "story output");


## Для всех (база)
Упрощенная инструкция затрагивает только базовый функционал.
Этого хватит, чтобы собрать сценарий, и предполагается, что пользователю не понадобится никаких технических знаний

### Текст истории

Давайте удалим все содержимое файла story/index.sts и начнем историю с чистого листа


#### Обычный текст
Обычный текст попадает в финальную сборку "как есть", без изменений
*фото("simple_text.png", "simple text");

#### Комментарии
Комментарии - это фрагмент текста, который не пойдет в финальную сборку. Комментарии нужны для самих разработчиков истории. Весь текст от символов /\/ и до конца строки будет считаться комментарием
*фото("comments.png", "comments");

#### Спец-символы (перенос строки, табуляция)
Есть три спец-символа, которые попадают в финальную сборку нестандартно. 

Это символ переноса строки
*фото("endline_symbol.png", "endline symbol");

Символы конца строки и табуляции
*фото("endline_and_tab.png", "endline and tab symbols");

#### Экранирование спец-символов
Экранирование спец-символов - это маркировка этих символов таким образом, чтобы компилятор не считал их спец-символами. Вот пример:
*фото("escaped_symbols.png", "escaped symbols");

### Переменные
Если оформить текст в виде списка, то элементы этого списка можно будет вставлять в других местах истории
Переменная пишется так (отступ из пробелов, потом звездочка, потом пробел, потом название переменной):

\t\* Название Переменной
\t  Содержание переменной пишется
\t  с новой строки и отступом от края 
\t  на 2 (два) пробела больше, чем у названия
\t  
\t  * Подпеременная
\t    Содержание подпеременной

Вот пример объявленной переменной
*фото("outer_variable.png", "outer variables");


### Вставки в текст
А вот переменные вставлены в текст, и что из этого получается:
*фото("outer_variable_inserted.png", "outer variables inserted");

#### Многоуровневые переменные
*фото("outer_variables_hierarchy.png", "outer variables hierarchy");

### Импорт других файлов
Мы работаем в файле story/index.sts
Давайте посмотрим, что у нас еще есть в папке story:
*фото("external_file.png", "external file");

Импортируем этот файл к нам
*фото("import_characters.png", "import characters");

И вставим персонажа из того файла в наш текст
*фото("inserted_imported_character.png", "import characters");


## Для программистов
Усложненная инструкция. Предполагается, что без объяснений ее должны понять программисты и всякие технари

### Идея
Storyscript задуман как диалект javascript по аналогии с *ссылка("https:\//www.typescriptlang.org/", "typescript");.

### Синтаксис

### Как это работает // что во что компилится и где настройки

## _
[Сидоренко Евгений](https:\//www.facebook.com/evgeny.sydorenko), февраль 2019